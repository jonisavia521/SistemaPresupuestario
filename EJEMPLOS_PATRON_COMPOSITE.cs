using System;
using Services.DomainModel.Security.Composite;

namespace Examples
{
    /// <summary>
    /// EJEMPLOS PR√ÅCTICOS DEL PATR√ìN COMPOSITE
    /// 
    /// Esta clase demuestra c√≥mo usar la implementaci√≥n del patr√≥n Composite
    /// del sistema de permisos con ejemplos paso a paso.
    /// </summary>
    public class CompositePatternExamples
    {
        /// <summary>
        /// EJEMPLO 1: Crear un usuario con permisos b√°sicos
        /// 
        /// Demuestra:
        /// - Creaci√≥n de patentes individuales
        /// - Asignaci√≥n directa de permisos al usuario
        /// - Obtenci√≥n de lista de permisos
        /// </summary>
        public static void EjemploBasico()
        {
            Console.WriteLine("=== EJEMPLO 1: PERMISOS B√ÅSICOS ===\n");

            // 1. CREAR PATENTES INDIVIDUALES
            var patenteLogin = new Patente
            {
                IdComponent = Guid.NewGuid(),
                FormName = "frmLogin",
                MenuItemName = "mnuLogin"
            };

            var patenteReportes = new Patente
            {
                IdComponent = Guid.NewGuid(),
                FormName = "frmReportes", 
                MenuItemName = "mnuGenerarReporte"
            };

            // 2. CREAR USUARIO
            var empleado = new Usuario
            {
                Id = Guid.NewGuid(),
                Nombre = "Carlos Empleado",
                User = "cempleado",
                Password = "123456"
            };

            // 3. ASIGNAR PERMISOS DIRECTOS
            empleado.Permisos.Add(patenteLogin);
            empleado.Permisos.Add(patenteReportes);

            // 4. OBTENER Y MOSTRAR PERMISOS
            var permisos = empleado.GetPatentesAll();
            
            Console.WriteLine($"Usuario: {empleado.Nombre}");
            Console.WriteLine($"Permisos ({permisos.Count}):");
            foreach (var permiso in permisos)
            {
                Console.WriteLine($"  - {permiso.FormName}");
            }
            Console.WriteLine();
        }

        /// <summary>
        /// EJEMPLO 2: Usuario con familia de permisos
        /// 
        /// Demuestra:
        /// - Creaci√≥n de familias de permisos
        /// - Agrupaci√≥n l√≥gica de patentes
        /// - Asignaci√≥n de familias completas a usuarios
        /// </summary>
        public static void EjemploConFamilias()
        {
            Console.WriteLine("=== EJEMPLO 2: FAMILIAS DE PERMISOS ===\n");

            // 1. CREAR PATENTES RELACIONADAS CON VENTAS
            var patenteFacturacion = new Patente
            {
                IdComponent = Guid.NewGuid(),
                FormName = "frmFacturacion",
                MenuItemName = "mnuCrearFactura"
            };

            var patenteCobranza = new Patente
            {
                IdComponent = Guid.NewGuid(),
                FormName = "frmCobranza",
                MenuItemName = "mnuRegistrarPago"
            };

            var patenteClientes = new Patente
            {
                IdComponent = Guid.NewGuid(),
                FormName = "frmClientes",
                MenuItemName = "mnuGestionClientes"
            };

            // 2. CREAR FAMILIA DE VENTAS
            var familiaVentas = new Familia
            {
                IdComponent = Guid.NewGuid(),
                Nombre = "M√≥dulo de Ventas"
            };

            // 3. AGREGAR PATENTES A LA FAMILIA
            familiaVentas.Add(patenteFacturacion);
            familiaVentas.Add(patenteCobranza);
            familiaVentas.Add(patenteClientes);

            // 4. CREAR USUARIO VENDEDOR
            var vendedor = new Usuario
            {
                Id = Guid.NewGuid(),
                Nombre = "Ana Vendedora",
                User = "avendedora",
                Password = "ventas123"
            };

            // 5. ASIGNAR FAMILIA COMPLETA + PERMISO INDIVIDUAL
            var patenteLogin = new Patente
            {
                IdComponent = Guid.NewGuid(),
                FormName = "frmLogin",
                MenuItemName = "mnuLogin"
            };

            vendedor.Permisos.Add(patenteLogin);      // Permiso individual
            vendedor.Permisos.Add(familiaVentas);     // Familia completa

            // 6. MOSTRAR ESTRUCTURA Y PERMISOS FINALES
            Console.WriteLine($"Usuario: {vendedor.Nombre}");
            Console.WriteLine("\nEstructura de permisos:");
            Console.WriteLine("‚îú‚îÄ‚îÄ Patente: Login (individual)");
            Console.WriteLine("‚îî‚îÄ‚îÄ Familia: M√≥dulo de Ventas");
            Console.WriteLine("    ‚îú‚îÄ‚îÄ Patente: Facturaci√≥n");
            Console.WriteLine("    ‚îú‚îÄ‚îÄ Patente: Cobranza");
            Console.WriteLine("    ‚îî‚îÄ‚îÄ Patente: Clientes");

            // 7. PERMISOS EFECTIVOS (aplanados)
            var permisosEfectivos = vendedor.GetPatentesAll();
            Console.WriteLine($"\nPermisos efectivos ({permisosEfectivos.Count}):");
            foreach (var permiso in permisosEfectivos)
            {
                Console.WriteLine($"  - {permiso.FormName}");
            }
            Console.WriteLine();
        }

        /// <summary>
        /// EJEMPLO 3: Jerarqu√≠a compleja con m√∫ltiples niveles
        /// 
        /// Demuestra:
        /// - Familias que contienen otras familias (jerarqu√≠a)
        /// - Recorrido recursivo autom√°tico
        /// - Casos de uso realistas para administradores
        /// </summary>
        public static void EjemploJerarquicoComplejo()
        {
            Console.WriteLine("=== EJEMPLO 3: JERARQU√çA COMPLEJA ===\n");

            // === NIVEL 1: PATENTES B√ÅSICAS ===
            var patenteLogin = new Patente { FormName = "frmLogin", IdComponent = Guid.NewGuid() };

            // === NIVEL 2: PATENTES DE ADMINISTRACI√ìN ===
            var patenteUsuarios = new Patente { FormName = "frmUsuarios", IdComponent = Guid.NewGuid() };
            var patenteRoles = new Patente { FormName = "frmRoles", IdComponent = Guid.NewGuid() };

            // === NIVEL 3: PATENTES DE CONFIGURACI√ìN ===
            var patenteBackup = new Patente { FormName = "frmBackup", IdComponent = Guid.NewGuid() };
            var patenteLogs = new Patente { FormName = "frmLogs", IdComponent = Guid.NewGuid() };
            var patenteParametros = new Patente { FormName = "frmParametros", IdComponent = Guid.NewGuid() };

            // === CREAR FAMILIA DE CONFIGURACI√ìN (NIVEL 3) ===
            var familiaConfiguracion = new Familia
            {
                IdComponent = Guid.NewGuid(),
                Nombre = "Configuraci√≥n del Sistema"
            };
            familiaConfiguracion.Add(patenteBackup);
            familiaConfiguracion.Add(patenteLogs);
            familiaConfiguracion.Add(patenteParametros);

            // === CREAR FAMILIA DE ADMINISTRACI√ìN (NIVEL 2) ===
            var familiaAdministracion = new Familia
            {
                IdComponent = Guid.NewGuid(),
                Nombre = "Administraci√≥n"
            };
            familiaAdministracion.Add(patenteUsuarios);
            familiaAdministracion.Add(patenteRoles);
            familiaAdministracion.Add(familiaConfiguracion); // ¬°FAMILIA DENTRO DE FAMILIA!

            // === PATENTES DE REPORTES ===
            var patenteReporteVentas = new Patente { FormName = "frmReporteVentas", IdComponent = Guid.NewGuid() };
            var patenteReporteUsuarios = new Patente { FormName = "frmReporteUsuarios", IdComponent = Guid.NewGuid() };

            // === CREAR FAMILIA DE REPORTES ===
            var familiaReportes = new Familia
            {
                IdComponent = Guid.NewGuid(),
                Nombre = "Reportes"
            };
            familiaReportes.Add(patenteReporteVentas);
            familiaReportes.Add(patenteReporteUsuarios);

            // === CREAR USUARIO ADMINISTRADOR ===
            var administrador = new Usuario
            {
                Id = Guid.NewGuid(),
                Nombre = "Luis Administrador",
                User = "ladmin",
                Password = "admin123"
            };

            // === ASIGNAR PERMISOS MIXTOS ===
            administrador.Permisos.Add(patenteLogin);              // Individual
            administrador.Permisos.Add(familiaAdministracion);     // Jerarqu√≠a compleja
            administrador.Permisos.Add(familiaReportes);           // Otra familia

            // === MOSTRAR ESTRUCTURA COMPLETA ===
            Console.WriteLine($"Usuario: {administrador.Nombre}");
            Console.WriteLine("\nEstructura jer√°rquica de permisos:");
            Console.WriteLine("‚îú‚îÄ‚îÄ üóùÔ∏è  Patente: Login (individual)");
            Console.WriteLine("‚îú‚îÄ‚îÄ üéóÔ∏è  Familia: Administraci√≥n");
            Console.WriteLine("‚îÇ   ‚îú‚îÄ‚îÄ üóùÔ∏è  Patente: Usuarios");
            Console.WriteLine("‚îÇ   ‚îú‚îÄ‚îÄ üóùÔ∏è  Patente: Roles");
            Console.WriteLine("‚îÇ   ‚îî‚îÄ‚îÄ üéóÔ∏è  Familia: Configuraci√≥n del Sistema");
            Console.WriteLine("‚îÇ       ‚îú‚îÄ‚îÄ üóùÔ∏è  Patente: Backup");
            Console.WriteLine("‚îÇ       ‚îú‚îÄ‚îÄ üóùÔ∏è  Patente: Logs");
            Console.WriteLine("‚îÇ       ‚îî‚îÄ‚îÄ üóùÔ∏è  Patente: Par√°metros");
            Console.WriteLine("‚îî‚îÄ‚îÄ üéóÔ∏è  Familia: Reportes");
            Console.WriteLine("    ‚îú‚îÄ‚îÄ üóùÔ∏è  Patente: Reporte Ventas");
            Console.WriteLine("    ‚îî‚îÄ‚îÄ üóùÔ∏è  Patente: Reporte Usuarios");

            // === OBTENER PERMISOS EFECTIVOS ===
            Console.WriteLine("\n¬°EL PATR√ìN COMPOSITE EN ACCI√ìN!");
            Console.WriteLine("Recorriendo autom√°ticamente toda la jerarqu√≠a...\n");

            var permisosEfectivos = administrador.GetPatentesAll();
            
            Console.WriteLine($"Permisos efectivos finales ({permisosEfectivos.Count}):");
            foreach (var permiso in permisosEfectivos)
            {
                Console.WriteLine($"  ‚úì {permiso.FormName}");
            }

            Console.WriteLine("\n¬°El administrador tiene acceso a TODOS los formularios");
            Console.WriteLine("sin importar en qu√© nivel de la jerarqu√≠a est√©n!");
            Console.WriteLine();
        }

        /// <summary>
        /// EJEMPLO 4: Demostrar las restricciones del patr√≥n
        /// 
        /// Demuestra:
        /// - Qu√© pasa cuando intentas agregar hijos a una patente
        /// - Manejo de excepciones esperadas
        /// - Diferencias entre Leaf y Composite
        /// </summary>
        public static void EjemploRestricciones()
        {
            Console.WriteLine("=== EJEMPLO 4: RESTRICCIONES DEL PATR√ìN ===\n");

            var patente = new Patente 
            { 
                FormName = "frmEjemplo",
                IdComponent = Guid.NewGuid()
            };

            var familia = new Familia 
            { 
                Nombre = "Ejemplo Familia",
                IdComponent = Guid.NewGuid() 
            };

            Console.WriteLine("Comparando comportamiento entre Patente (Leaf) y Familia (Composite):\n");

            // === OPERACIONES EN FAMILIA (COMPOSITE) ===
            Console.WriteLine("‚úÖ FAMILIA (Composite) - Operaciones permitidas:");
            
            try 
            {
                familia.Add(patente);
                Console.WriteLine($"   familia.Add(patente) ‚Üí OK! Ahora tiene {familia.ChildrenCount()} hijo(s)");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"   familia.Add(patente) ‚Üí ERROR: {ex.Message}");
            }

            try 
            {
                var count = familia.ChildrenCount();
                Console.WriteLine($"   familia.ChildrenCount() ‚Üí OK! Retorna: {count}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"   familia.ChildrenCount() ‚Üí ERROR: {ex.Message}");
            }

            // === OPERACIONES EN PATENTE (LEAF) ===
            Console.WriteLine("\n‚ùå PATENTE (Leaf) - Operaciones restringidas:");

            try 
            {
                patente.Add(new Patente { IdComponent = Guid.NewGuid() });
                Console.WriteLine("   patente.Add(...) ‚Üí OK! (no deber√≠a llegar aqu√≠)");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"   patente.Add(...) ‚Üí EXCEPCI√ìN ESPERADA: {ex.Message}");
            }

            try 
            {
                var count = patente.ChildrenCount();
                Console.WriteLine($"   patente.ChildrenCount() ‚Üí OK! Retorna: {count} (siempre 0)");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"   patente.ChildrenCount() ‚Üí ERROR: {ex.Message}");
            }

            try 
            {
                patente.Remove(new Patente { IdComponent = Guid.NewGuid() });
                Console.WriteLine("   patente.Remove(...) ‚Üí OK! (no deber√≠a llegar aqu√≠)");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"   patente.Remove(...) ‚Üí EXCEPCI√ìN ESPERADA: {ex.Message}");
            }

            Console.WriteLine("\nüí° CONCLUSI√ìN:");
            Console.WriteLine("   - Las FAMILIAS aceptan operaciones de contenedor (Add, Remove, etc.)");
            Console.WriteLine("   - Las PATENTES rechazan operaciones de contenedor (son elementos terminales)");
            Console.WriteLine("   - Esto mantiene la integridad del patr√≥n Composite");
            Console.WriteLine();
        }

        /// <summary>
        /// M√âTODO PRINCIPAL PARA EJECUTAR TODOS LOS EJEMPLOS
        /// </summary>
        public static void EjecutarTodosLosEjemplos()
        {
            Console.WriteLine("üöÄ DEMOSTRACIONES DEL PATR√ìN COMPOSITE");
            Console.WriteLine("=====================================\n");

            EjemploBasico();
            EjemploConFamilias();
            EjemploJerarquicoComplejo();
            EjemploRestricciones();

            Console.WriteLine("‚ú® ¬°Todos los ejemplos completados!");
            Console.WriteLine("El patr√≥n Composite permite manejar estructuras jer√°rquicas");
            Console.WriteLine("de permisos de forma simple, flexible y extensible.");
        }
    }
}